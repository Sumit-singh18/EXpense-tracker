{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\src\\\\components\\\\Statistics\\\\DoughnutChartCategory.js\";\nimport React, { Component } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\nimport { Route } from \"react-router-dom\";\n\nvar DoughnutChartCategory =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DoughnutChartCategory, _Component);\n\n  function DoughnutChartCategory(props) {\n    var _this;\n\n    _classCallCheck(this, DoughnutChartCategory);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DoughnutChartCategory).call(this, props));\n    _this.state = {\n      year: \"all\"\n    };\n    return _this;\n  }\n\n  _createClass(DoughnutChartCategory, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var change = {};\n      change[e.target.name] = e.target.value;\n      this.setState(change);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expenses = this.props.expenses;\n      var currentUser = this.props.authUser;\n      var selectedYear = this.state.year;\n      var settings = this.props.settings;\n      var allCategoryTotals = null;\n      var monthDropdown = {\n        display: \"block\",\n        background: \"#DDDDDD\",\n        float: \"right\",\n        color: \"#000\",\n        border: \"none\",\n        padding: \"0px 5px 0px 0px\"\n      };\n      var formStyle = {\n        position: \"absolute\",\n        top: \"0\",\n        padding: \"15px\",\n        right: \"-15px\",\n        zIndex: \"9\"\n      };\n\n      if (!expenses || !currentUser || !settings) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }));\n      }\n\n      if (expenses && currentUser && selectedYear && settings) {\n        var eachExpense = utils.eachExpense(expenses);\n        var usersExpenses = utils.currentUsersExpenses(eachExpense, currentUser); //allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n        // dropdown selection all / any year\n\n        if (selectedYear == \"all\") {\n          allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n        } else {\n          allCategoryTotals = utils.calculateTotalForAllCategories(utils.expensesinSelectedYear(eachExpense, currentUser, selectedYear.toString()));\n        }\n\n        console.log(Object.keys(settings.editedCategories));\n        var names = [settings.editedCategories[\"Food\"] ? settings.editedCategories[\"Food\"] : \"Food\", settings.editedCategories[\"Automobile\"] ? settings.editedCategories[\"Automobile\"] : \"Automobile\", settings.editedCategories[\"Entertainment\"] ? settings.editedCategories[\"Entertainment\"] : \"Entertainment\", settings.editedCategories[\"Clothing\"] ? settings.editedCategories[\"Clothing\"] : \"Clothing\", settings.editedCategories[\"Healthcare\"] ? settings.editedCategories[\"Healthcare\"] : \"Healthcare\", settings.editedCategories[\"Travel\"] ? settings.editedCategories[\"Travel\"] : \"Travel\", settings.editedCategories[\"Shopping\"] ? settings.editedCategories[\"Shopping\"] : \"Shopping\", settings.editedCategories[\"Personal Care\"] ? settings.editedCategories[\"Personal Care\"] : \"Personal Care\", settings.editedCategories[\"Investment\"] ? settings.editedCategories[\"Investment\"] : \"Investment\", settings.editedCategories[\"Gifts & Donations\"] ? settings.editedCategories[\"Gifts & Donations\"] : \"Gifts & Donations\", settings.editedCategories[\"Bills & Utilities\"] ? settings.editedCategories[\"Bills & Utilities\"] : \"Bills & Utilities\", settings.editedCategories[\"Others\"] ? settings.editedCategories[\"Others\"] : \"Others\"];\n        var data = {\n          labels: names,\n          datasets: [{\n            data: Object.values(allCategoryTotals),\n            backgroundColor: utils.categoryColors,\n            hoverBackgroundColor: utils.categoryColors,\n            borderWidth: 0\n          }]\n        };\n        var options = {\n          legend: {\n            display: true,\n            position: \"left\",\n            fullWidth: true,\n            reverse: false,\n            labels: {\n              fontColor: \"rgb(247, 162, 120)\"\n            }\n          },\n          layout: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 15,\n              bottom: 0\n            }\n          },\n          cutoutPercentage: 70,\n          plugins: {\n            labels: {\n              // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n              render: \"percentage\",\n              // precision for percentage, default is 0\n              precision: 0,\n              // identifies whether or not labels of value 0 are displayed, default is false\n              showZero: true,\n              // font size, default is defaultFontSize\n              fontSize: 12,\n              // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n              fontColor: \"#000\",\n              // font style, default is defaultFontStyle\n              fontStyle: \"bold\",\n              // font family, default is defaultFontFamily\n              fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n              // draw text shadows under labels, default is false\n              textShadow: true,\n              // text shadow intensity, default is 6\n              shadowBlur: 10,\n              // text shadow X offset, default is 3\n              shadowOffsetX: -5,\n              // text shadow Y offset, default is 3\n              shadowOffsetY: 5,\n              // text shadow color, default is 'rgba(0,0,0,0.3)'\n              shadowColor: \"rgba(255,0,0,0.75)\",\n              // draw label in arc, default is false\n              // bar chart ignores this\n              arc: true,\n              // position to draw label, available value is 'default', 'border' and 'outside'\n              // bar chart ignores this\n              // default is 'default'\n              position: \"inside\",\n              // draw label even it's overlap, default is true\n              // bar chart ignores this\n              overlap: false,\n              // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n              showActualPercentages: true,\n              // add padding when position is `outside`\n              // default is 2\n              outsidePadding: 4,\n              // add margin of text when position is `outside` or `border`\n              // default is 2\n              textMargin: 14\n            }\n          }\n        };\n        var optionsMobile = {\n          legend: {\n            display: true,\n            position: \"left\",\n            fullWidth: true,\n            labels: {\n              fontColor: \"rgb(247, 162, 120)\"\n            }\n          },\n          layout: {\n            padding: {\n              left: 15,\n              right: 15,\n              top: 15,\n              bottom: 15\n            }\n          },\n          cutoutPercentage: 0,\n          plugins: {\n            labels: {\n              // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n              render: \"percentage\",\n              // precision for percentage, default is 0\n              precision: 0,\n              // identifies whether or not labels of value 0 are displayed, default is false\n              showZero: true,\n              // font size, default is defaultFontSize\n              fontSize: 12,\n              // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n              fontColor: \"#000\",\n              // font style, default is defaultFontStyle\n              fontStyle: \"bold\",\n              // font family, default is defaultFontFamily\n              fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n              // draw text shadows under labels, default is false\n              textShadow: true,\n              // text shadow intensity, default is 6\n              shadowBlur: 10,\n              // text shadow X offset, default is 3\n              shadowOffsetX: -5,\n              // text shadow Y offset, default is 3\n              shadowOffsetY: 5,\n              // text shadow color, default is 'rgba(0,0,0,0.3)'\n              shadowColor: \"rgba(255,0,0,0.75)\",\n              // draw label in arc, default is false\n              // bar chart ignores this\n              arc: true,\n              // position to draw label, available value is 'default', 'border' and 'outside'\n              // bar chart ignores this\n              // default is 'default'\n              position: \"inside\",\n              // draw label even it's overlap, default is true\n              // bar chart ignores this\n              overlap: false,\n              // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n              showActualPercentages: true,\n              // add padding when position is `outside`\n              // default is 2\n              outsidePadding: 4,\n              // add margin of text when position is `outside` or `border`\n              // default is 2\n              textMargin: 14\n            }\n          }\n        };\n        var lineArea = settings.mode === \"night\" ? {\n          background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\",\n          padding: 0\n        } : {\n          background: \"#dddddd\",\n          padding: 0\n        };\n        return React.createElement(\"div\", {\n          style: lineArea,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-12 col-xs-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          name: \"year\",\n          style: monthDropdown,\n          value: this.state.year,\n          onChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"all\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, \"All\"), utils.yearsGenereator().map(function (elem, i) {\n          return React.createElement(\"option\", {\n            key: i,\n            value: elem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248\n            },\n            __self: this\n          }, elem);\n        })))), React.createElement(Route, {\n          render: function render(_ref) {\n            var history = _ref.history;\n            return React.createElement(Doughnut, {\n              data: data,\n              options: window.screen.width > 720 ? options : optionsMobile,\n              height: window.screen.width > 720 ? 140 : 270,\n              responsive: true,\n              onElementsClick: function onElementsClick(elems) {\n                if (elems.length) {\n                  var clickedLabel = elems[0]._model.label;\n\n                  if (selectedYear !== \"all\") {\n                    history.push(\"/filter-view?category=\".concat(clickedLabel, \"&selectedYear=\").concat(selectedYear, \"&from=yearpage\"));\n                  }\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 255\n              },\n              __self: this\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return DoughnutChartCategory;\n}(Component);\n\nexport default DoughnutChartCategory;","map":{"version":3,"sources":["C:\\Users\\sumit\\OneDrive\\Desktop\\expense-manager-react-master\\src\\components\\Statistics\\DoughnutChartCategory.js"],"names":["React","Component","Doughnut","Loader","utils","Route","DoughnutChartCategory","props","state","year","e","change","target","name","value","setState","expenses","currentUser","authUser","selectedYear","settings","allCategoryTotals","monthDropdown","display","background","float","color","border","padding","formStyle","position","top","right","zIndex","eachExpense","usersExpenses","currentUsersExpenses","calculateTotalForAllCategories","expensesinSelectedYear","toString","console","log","Object","keys","editedCategories","names","data","labels","datasets","values","backgroundColor","categoryColors","hoverBackgroundColor","borderWidth","options","legend","fullWidth","reverse","fontColor","layout","left","bottom","cutoutPercentage","plugins","render","precision","showZero","fontSize","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","overlap","showActualPercentages","outsidePadding","textMargin","optionsMobile","lineArea","mode","window","screen","width","handleChange","bind","yearsGenereator","map","elem","i","history","elems","length","clickedLabel","_model","label","push"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,uBAAP;AAEA,SAASC,KAAT,QAAsB,kBAAtB;;IAEMC,qB;;;;;AACF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAHe;AAMlB;;;;iCAEYC,C,EAAG;AACZ,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,IAAV,CAAN,GAAwBH,CAAC,CAACE,MAAF,CAASE,KAAjC;AACA,WAAKC,QAAL,CAAcJ,MAAd;AACH;;;6BAEQ;AACL,UAAMK,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAA5B;AACA,UAAMC,WAAW,GAAG,KAAKV,KAAL,CAAWW,QAA/B;AACA,UAAMC,YAAY,GAAG,KAAKX,KAAL,CAAWC,IAAhC;AACA,UAAMW,QAAQ,GAAG,KAAKb,KAAL,CAAWa,QAA5B;AAEA,UAAIC,iBAAiB,GAAG,IAAxB;AAEA,UAAMC,aAAa,GAAG;AAClBC,QAAAA,OAAO,EAAE,OADS;AAElBC,QAAAA,UAAU,EAAE,SAFM;AAGlBC,QAAAA,KAAK,EAAE,OAHW;AAIlBC,QAAAA,KAAK,EAAE,MAJW;AAKlBC,QAAAA,MAAM,EAAE,MALU;AAMlBC,QAAAA,OAAO,EAAE;AANS,OAAtB;AASA,UAAMC,SAAS,GAAG;AAAEC,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,GAAG,EAAE,GAA7B;AAAkCH,QAAAA,OAAO,EAAE,MAA3C;AAAmDI,QAAAA,KAAK,EAAE,OAA1D;AAAmEC,QAAAA,MAAM,EAAE;AAA3E,OAAlB;;AAEA,UAAI,CAACjB,QAAD,IAAa,CAACC,WAAd,IAA6B,CAACG,QAAlC,EAA4C;AACxC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAKH;;AAED,UAAIJ,QAAQ,IAAIC,WAAZ,IAA2BE,YAA3B,IAA2CC,QAA/C,EAAyD;AACrD,YAAMc,WAAW,GAAG9B,KAAK,CAAC8B,WAAN,CAAkBlB,QAAlB,CAApB;AACA,YAAMmB,aAAa,GAAG/B,KAAK,CAACgC,oBAAN,CAA2BF,WAA3B,EAAwCjB,WAAxC,CAAtB,CAFqD,CAIrD;AAEA;;AACA,YAAIE,YAAY,IAAI,KAApB,EAA2B;AACvBE,UAAAA,iBAAiB,GAAGjB,KAAK,CAACiC,8BAAN,CAAqCF,aAArC,CAApB;AACH,SAFD,MAEO;AACHd,UAAAA,iBAAiB,GAAGjB,KAAK,CAACiC,8BAAN,CAChBjC,KAAK,CAACkC,sBAAN,CAA6BJ,WAA7B,EAA0CjB,WAA1C,EAAuDE,YAAY,CAACoB,QAAb,EAAvD,CADgB,CAApB;AAGH;;AAEDC,QAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYvB,QAAQ,CAACwB,gBAArB,CAAZ;AAGA,YAAMC,KAAK,GAAG,CACVzB,QAAQ,CAACwB,gBAAT,CAA0B,MAA1B,IAAoCxB,QAAQ,CAACwB,gBAAT,CAA0B,MAA1B,CAApC,GAAwE,MAD9D,EAEVxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,IAA0CxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,CAA1C,GAAoF,YAF1E,EAGVxB,QAAQ,CAACwB,gBAAT,CAA0B,eAA1B,IAA6CxB,QAAQ,CAACwB,gBAAT,CAA0B,eAA1B,CAA7C,GAA0F,eAHhF,EAIVxB,QAAQ,CAACwB,gBAAT,CAA0B,UAA1B,IAAwCxB,QAAQ,CAACwB,gBAAT,CAA0B,UAA1B,CAAxC,GAAgF,UAJtE,EAKVxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,IAA0CxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,CAA1C,GAAoF,YAL1E,EAMVxB,QAAQ,CAACwB,gBAAT,CAA0B,QAA1B,IAAsCxB,QAAQ,CAACwB,gBAAT,CAA0B,QAA1B,CAAtC,GAA4E,QANlE,EAOVxB,QAAQ,CAACwB,gBAAT,CAA0B,UAA1B,IAAwCxB,QAAQ,CAACwB,gBAAT,CAA0B,UAA1B,CAAxC,GAAgF,UAPtE,EAQVxB,QAAQ,CAACwB,gBAAT,CAA0B,eAA1B,IAA6CxB,QAAQ,CAACwB,gBAAT,CAA0B,eAA1B,CAA7C,GAA0F,eARhF,EASVxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,IAA0CxB,QAAQ,CAACwB,gBAAT,CAA0B,YAA1B,CAA1C,GAAoF,YAT1E,EAUVxB,QAAQ,CAACwB,gBAAT,CAA0B,mBAA1B,IAAiDxB,QAAQ,CAACwB,gBAAT,CAA0B,mBAA1B,CAAjD,GAAkG,mBAVxF,EAWVxB,QAAQ,CAACwB,gBAAT,CAA0B,mBAA1B,IAAiDxB,QAAQ,CAACwB,gBAAT,CAA0B,mBAA1B,CAAjD,GAAkG,mBAXxF,EAYVxB,QAAQ,CAACwB,gBAAT,CAA0B,QAA1B,IAAsCxB,QAAQ,CAACwB,gBAAT,CAA0B,QAA1B,CAAtC,GAA4E,QAZlE,CAAd;AAeA,YAAME,IAAI,GAAG;AACTC,UAAAA,MAAM,EAAEF,KADC;AAETG,UAAAA,QAAQ,EAAE,CACN;AACIF,YAAAA,IAAI,EAAEJ,MAAM,CAACO,MAAP,CAAc5B,iBAAd,CADV;AAEI6B,YAAAA,eAAe,EAAE9C,KAAK,CAAC+C,cAF3B;AAGIC,YAAAA,oBAAoB,EAAEhD,KAAK,CAAC+C,cAHhC;AAIIE,YAAAA,WAAW,EAAE;AAJjB,WADM;AAFD,SAAb;AAYA,YAAMC,OAAO,GAAG;AACZC,UAAAA,MAAM,EAAE;AAAEhC,YAAAA,OAAO,EAAE,IAAX;AAAiBO,YAAAA,QAAQ,EAAE,MAA3B;AAAmC0B,YAAAA,SAAS,EAAE,IAA9C;AAAoDC,YAAAA,OAAO,EAAE,KAA7D;AAAoEV,YAAAA,MAAM,EAAE;AAAEW,cAAAA,SAAS,EAAE;AAAb;AAA5E,WADI;AAEZC,UAAAA,MAAM,EAAE;AAAE/B,YAAAA,OAAO,EAAE;AAAEgC,cAAAA,IAAI,EAAE,CAAR;AAAW5B,cAAAA,KAAK,EAAE,CAAlB;AAAqBD,cAAAA,GAAG,EAAE,EAA1B;AAA8B8B,cAAAA,MAAM,EAAE;AAAtC;AAAX,WAFI;AAGZC,UAAAA,gBAAgB,EAAE,EAHN;AAIZC,UAAAA,OAAO,EAAE;AACLhB,YAAAA,MAAM,EAAE;AACJ;AACAiB,cAAAA,MAAM,EAAE,YAFJ;AAIJ;AACAC,cAAAA,SAAS,EAAE,CALP;AAOJ;AACAC,cAAAA,QAAQ,EAAE,IARN;AAUJ;AACAC,cAAAA,QAAQ,EAAE,EAXN;AAaJ;AACAT,cAAAA,SAAS,EAAE,MAdP;AAgBJ;AACAU,cAAAA,SAAS,EAAE,MAjBP;AAmBJ;AACAC,cAAAA,UAAU,EAAE,oDApBR;AAsBJ;AACAC,cAAAA,UAAU,EAAE,IAvBR;AAyBJ;AACAC,cAAAA,UAAU,EAAE,EA1BR;AA4BJ;AACAC,cAAAA,aAAa,EAAE,CAAC,CA7BZ;AA+BJ;AACAC,cAAAA,aAAa,EAAE,CAhCX;AAkCJ;AACAC,cAAAA,WAAW,EAAE,oBAnCT;AAqCJ;AACA;AACAC,cAAAA,GAAG,EAAE,IAvCD;AAyCJ;AACA;AACA;AACA7C,cAAAA,QAAQ,EAAE,QA5CN;AA8CJ;AACA;AACA8C,cAAAA,OAAO,EAAE,KAhDL;AAkDJ;AACAC,cAAAA,qBAAqB,EAAE,IAnDnB;AAqDJ;AACA;AACAC,cAAAA,cAAc,EAAE,CAvDZ;AAyDJ;AACA;AACAC,cAAAA,UAAU,EAAE;AA3DR;AADH;AAJG,SAAhB;AAqEA,YAAMC,aAAa,GAAG;AAClBzB,UAAAA,MAAM,EAAE;AAAEhC,YAAAA,OAAO,EAAE,IAAX;AAAiBO,YAAAA,QAAQ,EAAE,MAA3B;AAAmC0B,YAAAA,SAAS,EAAE,IAA9C;AAAoDT,YAAAA,MAAM,EAAE;AAAEW,cAAAA,SAAS,EAAE;AAAb;AAA5D,WADU;AAElBC,UAAAA,MAAM,EAAE;AAAE/B,YAAAA,OAAO,EAAE;AAAEgC,cAAAA,IAAI,EAAE,EAAR;AAAY5B,cAAAA,KAAK,EAAE,EAAnB;AAAuBD,cAAAA,GAAG,EAAE,EAA5B;AAAgC8B,cAAAA,MAAM,EAAE;AAAxC;AAAX,WAFU;AAGlBC,UAAAA,gBAAgB,EAAE,CAHA;AAIlBC,UAAAA,OAAO,EAAE;AACLhB,YAAAA,MAAM,EAAE;AACJ;AACAiB,cAAAA,MAAM,EAAE,YAFJ;AAIJ;AACAC,cAAAA,SAAS,EAAE,CALP;AAOJ;AACAC,cAAAA,QAAQ,EAAE,IARN;AAUJ;AACAC,cAAAA,QAAQ,EAAE,EAXN;AAaJ;AACAT,cAAAA,SAAS,EAAE,MAdP;AAgBJ;AACAU,cAAAA,SAAS,EAAE,MAjBP;AAmBJ;AACAC,cAAAA,UAAU,EAAE,oDApBR;AAsBJ;AACAC,cAAAA,UAAU,EAAE,IAvBR;AAyBJ;AACAC,cAAAA,UAAU,EAAE,EA1BR;AA4BJ;AACAC,cAAAA,aAAa,EAAE,CAAC,CA7BZ;AA+BJ;AACAC,cAAAA,aAAa,EAAE,CAhCX;AAkCJ;AACAC,cAAAA,WAAW,EAAE,oBAnCT;AAqCJ;AACA;AACAC,cAAAA,GAAG,EAAE,IAvCD;AAyCJ;AACA;AACA;AACA7C,cAAAA,QAAQ,EAAE,QA5CN;AA8CJ;AACA;AACA8C,cAAAA,OAAO,EAAE,KAhDL;AAkDJ;AACAC,cAAAA,qBAAqB,EAAE,IAnDnB;AAqDJ;AACA;AACAC,cAAAA,cAAc,EAAE,CAvDZ;AAyDJ;AACA;AACAC,cAAAA,UAAU,EAAE;AA3DR;AADH;AAJS,SAAtB;AAqEA,YAAME,QAAQ,GAAG7D,QAAQ,CAAC8D,IAAT,KAAkB,OAAlB,GAA4B;AAAE1D,UAAAA,UAAU,EAAE2D,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,SAA5B,GAAwC,SAAtD;AAAiEzD,UAAAA,OAAO,EAAE;AAA1E,SAA5B,GAA4G;AAAEJ,UAAAA,UAAU,EAAE,SAAd;AAAyBI,UAAAA,OAAO,EAAE;AAAlC,SAA7H;AAEA,eACI;AAAK,UAAA,KAAK,EAAEqD,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,KAAK,EAAE3D,aAFX;AAGI,UAAA,KAAK,EAAE,KAAKd,KAAL,CAAWC,IAHtB;AAII,UAAA,QAAQ,EAAE,KAAK6E,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMI;AAAQ,UAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,EAOKnF,KAAK,CAACoF,eAAN,GAAwBC,GAAxB,CAA4B,UAACC,IAAD,EAAOC,CAAP;AAAA,iBACzB;AAAQ,YAAA,GAAG,EAAEA,CAAb;AAAgB,YAAA,KAAK,EAAED,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA8BA,IAA9B,CADyB;AAAA,SAA5B,CAPL,CADJ,CADJ,CADJ,EAgBI,oBAAC,KAAD;AACI,UAAA,MAAM,EAAE;AAAA,gBAAGE,OAAH,QAAGA,OAAH;AAAA,mBACJ,oBAAC,QAAD;AACI,cAAA,IAAI,EAAE9C,IADV;AAEI,cAAA,OAAO,EAAEqC,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B/B,OAA5B,GAAsC0B,aAFnD;AAGI,cAAA,MAAM,EAAEG,MAAM,CAACC,MAAP,CAAcC,KAAd,GAAsB,GAAtB,GAA4B,GAA5B,GAAkC,GAH9C;AAII,cAAA,UAAU,EAAE,IAJhB;AAKI,cAAA,eAAe,EAAE,yBAAAQ,KAAK,EAAI;AACtB,oBAAIA,KAAK,CAACC,MAAV,EAAkB;AACd,sBAAIC,YAAY,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,CAAgBC,KAAnC;;AACA,sBAAI9E,YAAY,KAAK,KAArB,EAA4B;AACxByE,oBAAAA,OAAO,CAACM,IAAR,iCAC6BH,YAD7B,2BAC0D5E,YAD1D;AAGH;AACJ;AACJ,eAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADI;AAAA,WADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBJ,CADJ;AAuCH;AACJ;;;;EA3Q+BlB,S;;AA8QpC,eAAeK,qBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\n\nimport { Route } from \"react-router-dom\";\n\nclass DoughnutChartCategory extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            year: \"all\"\n        };\n    }\n\n    handleChange(e) {\n        var change = {};\n        change[e.target.name] = e.target.value;\n        this.setState(change);\n    }\n\n    render() {\n        const expenses = this.props.expenses;\n        const currentUser = this.props.authUser;\n        const selectedYear = this.state.year;\n        const settings = this.props.settings;\n\n        let allCategoryTotals = null;\n\n        const monthDropdown = {\n            display: \"block\",\n            background: \"#DDDDDD\",\n            float: \"right\",\n            color: \"#000\",\n            border: \"none\",\n            padding: \"0px 5px 0px 0px\"\n        };\n\n        const formStyle = { position: \"absolute\", top: \"0\", padding: \"15px\", right: \"-15px\", zIndex: \"9\" };\n\n        if (!expenses || !currentUser || !settings) {\n            return (\n                <div>\n                    <Loader />\n                </div>\n            );\n        }\n\n        if (expenses && currentUser && selectedYear && settings) {\n            const eachExpense = utils.eachExpense(expenses);\n            const usersExpenses = utils.currentUsersExpenses(eachExpense, currentUser);\n\n            //allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n\n            // dropdown selection all / any year\n            if (selectedYear == \"all\") {\n                allCategoryTotals = utils.calculateTotalForAllCategories(usersExpenses);\n            } else {\n                allCategoryTotals = utils.calculateTotalForAllCategories(\n                    utils.expensesinSelectedYear(eachExpense, currentUser, selectedYear.toString())\n                );\n            }\n\n            console.log(Object.keys(settings.editedCategories))\n\n\n            const names = [\n                settings.editedCategories[\"Food\"] ? settings.editedCategories[\"Food\"] : \"Food\",\n                settings.editedCategories[\"Automobile\"] ? settings.editedCategories[\"Automobile\"] : \"Automobile\",\n                settings.editedCategories[\"Entertainment\"] ? settings.editedCategories[\"Entertainment\"] : \"Entertainment\",\n                settings.editedCategories[\"Clothing\"] ? settings.editedCategories[\"Clothing\"] : \"Clothing\",\n                settings.editedCategories[\"Healthcare\"] ? settings.editedCategories[\"Healthcare\"] : \"Healthcare\",\n                settings.editedCategories[\"Travel\"] ? settings.editedCategories[\"Travel\"] : \"Travel\",\n                settings.editedCategories[\"Shopping\"] ? settings.editedCategories[\"Shopping\"] : \"Shopping\",\n                settings.editedCategories[\"Personal Care\"] ? settings.editedCategories[\"Personal Care\"] : \"Personal Care\",\n                settings.editedCategories[\"Investment\"] ? settings.editedCategories[\"Investment\"] : \"Investment\",\n                settings.editedCategories[\"Gifts & Donations\"] ? settings.editedCategories[\"Gifts & Donations\"] : \"Gifts & Donations\",\n                settings.editedCategories[\"Bills & Utilities\"] ? settings.editedCategories[\"Bills & Utilities\"] : \"Bills & Utilities\",\n                settings.editedCategories[\"Others\"] ? settings.editedCategories[\"Others\"] : \"Others\",\n            ];\n\n            const data = {\n                labels: names,\n                datasets: [\n                    {\n                        data: Object.values(allCategoryTotals),\n                        backgroundColor: utils.categoryColors,\n                        hoverBackgroundColor: utils.categoryColors,\n                        borderWidth: 0,\n                    }\n                ]\n            };\n\n            const options = {\n                legend: { display: true, position: \"left\", fullWidth: true, reverse: false, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n                layout: { padding: { left: 0, right: 0, top: 15, bottom: 0 } },\n                cutoutPercentage: 70,\n                plugins: {\n                    labels: {\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                        render: \"percentage\",\n\n                        // precision for percentage, default is 0\n                        precision: 0,\n\n                        // identifies whether or not labels of value 0 are displayed, default is false\n                        showZero: true,\n\n                        // font size, default is defaultFontSize\n                        fontSize: 12,\n\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                        fontColor: \"#000\",\n\n                        // font style, default is defaultFontStyle\n                        fontStyle: \"bold\",\n\n                        // font family, default is defaultFontFamily\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                        // draw text shadows under labels, default is false\n                        textShadow: true,\n\n                        // text shadow intensity, default is 6\n                        shadowBlur: 10,\n\n                        // text shadow X offset, default is 3\n                        shadowOffsetX: -5,\n\n                        // text shadow Y offset, default is 3\n                        shadowOffsetY: 5,\n\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\n                        shadowColor: \"rgba(255,0,0,0.75)\",\n\n                        // draw label in arc, default is false\n                        // bar chart ignores this\n                        arc: true,\n\n                        // position to draw label, available value is 'default', 'border' and 'outside'\n                        // bar chart ignores this\n                        // default is 'default'\n                        position: \"inside\",\n\n                        // draw label even it's overlap, default is true\n                        // bar chart ignores this\n                        overlap: false,\n\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                        showActualPercentages: true,\n\n                        // add padding when position is `outside`\n                        // default is 2\n                        outsidePadding: 4,\n\n                        // add margin of text when position is `outside` or `border`\n                        // default is 2\n                        textMargin: 14\n                    }\n                }\n            };\n\n            const optionsMobile = {\n                legend: { display: true, position: \"left\", fullWidth: true, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n                layout: { padding: { left: 15, right: 15, top: 15, bottom: 15 } },\n                cutoutPercentage: 0,\n                plugins: {\n                    labels: {\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                        render: \"percentage\",\n\n                        // precision for percentage, default is 0\n                        precision: 0,\n\n                        // identifies whether or not labels of value 0 are displayed, default is false\n                        showZero: true,\n\n                        // font size, default is defaultFontSize\n                        fontSize: 12,\n\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                        fontColor: \"#000\",\n\n                        // font style, default is defaultFontStyle\n                        fontStyle: \"bold\",\n\n                        // font family, default is defaultFontFamily\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                        // draw text shadows under labels, default is false\n                        textShadow: true,\n\n                        // text shadow intensity, default is 6\n                        shadowBlur: 10,\n\n                        // text shadow X offset, default is 3\n                        shadowOffsetX: -5,\n\n                        // text shadow Y offset, default is 3\n                        shadowOffsetY: 5,\n\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\n                        shadowColor: \"rgba(255,0,0,0.75)\",\n\n                        // draw label in arc, default is false\n                        // bar chart ignores this\n                        arc: true,\n\n                        // position to draw label, available value is 'default', 'border' and 'outside'\n                        // bar chart ignores this\n                        // default is 'default'\n                        position: \"inside\",\n\n                        // draw label even it's overlap, default is true\n                        // bar chart ignores this\n                        overlap: false,\n\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                        showActualPercentages: true,\n\n                        // add padding when position is `outside`\n                        // default is 2\n                        outsidePadding: 4,\n\n                        // add margin of text when position is `outside` or `border`\n                        // default is 2\n                        textMargin: 14\n                    }\n                }\n            };\n\n            const lineArea = settings.mode === \"night\" ? { background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\", padding: 0 } : { background: \"#dddddd\", padding: 0 };\n\n            return (\n                <div style={lineArea}>\n                    <form>\n                        <div className=\"col-sm-12 col-xs-12\">\n                            <select\n                                name=\"year\"\n                                style={monthDropdown}\n                                value={this.state.year}\n                                onChange={this.handleChange.bind(this)}\n                            >\n                                <option value=\"all\">All</option>\n                                {utils.yearsGenereator().map((elem, i) => (\n                                    <option key={i} value={elem}>{elem}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </form>\n                    <Route\n                        render={({ history }) => (\n                            <Doughnut\n                                data={data}\n                                options={window.screen.width > 720 ? options : optionsMobile}\n                                height={window.screen.width > 720 ? 140 : 270}\n                                responsive={true}\n                                onElementsClick={elems => {\n                                    if (elems.length) {\n                                        let clickedLabel = elems[0]._model.label;\n                                        if (selectedYear !== \"all\") {\n                                            history.push(\n                                                `/filter-view?category=${clickedLabel}&selectedYear=${selectedYear}&from=yearpage`\n                                            );\n                                        }\n                                    }\n                                }}\n                            />\n                        )}\n                    />\n                </div>\n            );\n        }\n    }\n}\n\nexport default DoughnutChartCategory;\n"]},"metadata":{},"sourceType":"module"}