{"ast":null,"code":"import _objectSpread from \"D:\\\\itstk\\\\Downloads\\\\Compressed\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\itstk\\\\Downloads\\\\Compressed\\\\expense-manager-react-master\\\\src\\\\components\\\\MonthView\\\\DoughnutChart.js\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\nimport { Route } from \"react-router-dom\";\n\nvar DoughnutChart = function DoughnutChart(props) {\n  var expenses = props.expenses;\n  var currentUser = props.authUser;\n  var selectedMonth = props.month;\n  var selectedYear = props.year;\n  var settings = props.settings;\n  var allCategoryTotals = null;\n  var categoryList = null;\n  var categoryColors = null;\n\n  if (!expenses || !currentUser || !selectedMonth || !selectedYear || !settings) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n  if (expenses && currentUser && selectedMonth && selectedYear && settings) {\n    var eachExpense = utils.eachExpense(expenses);\n    var usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(eachExpense, currentUser, selectedMonth, selectedYear);\n    allCategoryTotals = utils.calculateTotalForAllCategories(usersExpensesInSelectedMonthAndYear);\n\n    var eachCategory = function eachCategory(allCategoryTotals) {\n      return Object.keys(allCategoryTotals).map(function (key) {\n        return {\n          key: settings.editedCategories[key] ? settings.editedCategories[key] : key,\n          value: allCategoryTotals[key]\n        };\n      });\n    };\n\n    categoryList = eachCategory(allCategoryTotals).filter(function (el) {\n      return el.value > 0;\n    }).map(function (el) {\n      return el.key;\n    });\n    categoryColors = categoryList.map(function (el) {\n      var cat = Object.keys(settings.editedCategories).filter(function (key) {\n        return settings.editedCategories[key] === el;\n      })[0] || el;\n      return utils.getCatColor(cat);\n    });\n    var data = {\n      labels: categoryList,\n      datasets: [{\n        data: Object.values(allCategoryTotals).filter(function (el) {\n          return el > 0;\n        }),\n        backgroundColor: categoryColors,\n        hoverBackgroundColor: categoryColors,\n        borderWidth: 0\n      }]\n    };\n    var options = {\n      legend: {\n        display: true,\n        position: \"left\",\n        fullWidth: true,\n        reverse: false,\n        labels: {\n          fontColor: \"rgb(247, 162, 120)\"\n        }\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 85,\n          top: 5,\n          bottom: 5\n        }\n      },\n      cutoutPercentage: 70,\n      plugins: {\n        labels: {\n          // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n          render: \"percentage\",\n          // precision for percentage, default is 0\n          precision: 0,\n          // identifies whether or not labels of value 0 are displayed, default is false\n          showZero: true,\n          // font size, default is defaultFontSize\n          fontSize: 12,\n          // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n          fontColor: \"#000\",\n          // font style, default is defaultFontStyle\n          fontStyle: \"bold\",\n          // font family, default is defaultFontFamily\n          fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          // draw text shadows under labels, default is false\n          textShadow: true,\n          // text shadow intensity, default is 6\n          shadowBlur: 10,\n          // text shadow X offset, default is 3\n          shadowOffsetX: -5,\n          // text shadow Y offset, default is 3\n          shadowOffsetY: 5,\n          // text shadow color, default is 'rgba(0,0,0,0.3)'\n          shadowColor: \"rgba(255,0,0,0.75)\",\n          // draw label in arc, default is false\n          // bar chart ignores this\n          arc: true,\n          // position to draw label, available value is 'default', 'border' and 'outside'\n          // bar chart ignores this\n          // default is 'default'\n          position: \"inside\",\n          // draw label even it's overlap, default is true\n          // bar chart ignores this\n          overlap: false,\n          // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n          showActualPercentages: true,\n          // add padding when position is `outside`\n          // default is 2\n          outsidePadding: 4,\n          // add margin of text when position is `outside` or `border`\n          // default is 2\n          textMargin: 14\n        }\n      }\n    };\n    var optionsMobile = {\n      legend: {\n        display: true,\n        position: \"left\",\n        fullWidth: true,\n        labels: {\n          fontColor: \"rgb(247, 162, 120)\"\n        }\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 15,\n          top: 15,\n          bottom: 15\n        }\n      },\n      cutoutPercentage: 0,\n      plugins: {\n        labels: {\n          // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n          render: \"percentage\",\n          // precision for percentage, default is 0\n          precision: 0,\n          // identifies whether or not labels of value 0 are displayed, default is false\n          showZero: true,\n          // font size, default is defaultFontSize\n          fontSize: 12,\n          // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n          fontColor: \"#000\",\n          // font style, default is defaultFontStyle\n          fontStyle: \"normal\",\n          // font family, default is defaultFontFamily\n          fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          // draw text shadows under labels, default is false\n          textShadow: true,\n          // text shadow intensity, default is 6\n          shadowBlur: 10,\n          // text shadow X offset, default is 3\n          shadowOffsetX: -5,\n          // text shadow Y offset, default is 3\n          shadowOffsetY: 5,\n          // text shadow color, default is 'rgba(0,0,0,0.3)'\n          shadowColor: \"rgba(255,0,0,0.75)\",\n          // draw label in arc, default is false\n          // bar chart ignores this\n          arc: true,\n          // position to draw label, available value is 'default', 'border' and 'outside'\n          // bar chart ignores this\n          // default is 'default'\n          position: \"inside\",\n          // draw label even it's overlap, default is true\n          // bar chart ignores this\n          overlap: false,\n          // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n          showActualPercentages: true,\n          // add padding when position is `outside`\n          // default is 2\n          outsidePadding: 4,\n          // add margin of text when position is `outside` or `border`\n          // default is 2\n          textMargin: 4\n        }\n      }\n    };\n    var mobPad15 = {\n      padding: window.screen.width > 720 ? \"0\" : \"15px\"\n    };\n    var headerColor = settings.mode === \"night\" ? {\n      color: \"rgb(237, 211, 130)\"\n    } : {\n      color: \"inherit\"\n    };\n    var lineArea = settings.mode === \"night\" ? {\n      background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\"\n    } : {\n      background: \"#dddddd\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      style: _objectSpread({}, mobPad15, headerColor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Category Analyser\"), React.createElement(Route, {\n      render: function render(_ref) {\n        var history = _ref.history;\n        return React.createElement(\"div\", {\n          style: lineArea,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(Doughnut, {\n          data: data,\n          options: window.screen.width > 720 ? options : optionsMobile,\n          height: window.screen.width > 720 ? 80 : 230,\n          responsive: true,\n          onElementsClick: function onElementsClick(elems) {\n            if (elems.length) {\n              var clickedLabel = elems[0]._model.label;\n              history.push(\"/filter-view?category=\".concat(clickedLabel, \"&selectedMonth=\").concat(selectedMonth, \"&selectedYear=\").concat(selectedYear, \"&from=monthpage\"));\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default DoughnutChart;","map":{"version":3,"sources":["D:\\itstk\\Downloads\\Compressed\\expense-manager-react-master\\src\\components\\MonthView\\DoughnutChart.js"],"names":["React","Doughnut","Loader","utils","Route","DoughnutChart","props","expenses","currentUser","authUser","selectedMonth","month","selectedYear","year","settings","allCategoryTotals","categoryList","categoryColors","eachExpense","usersExpensesInSelectedMonthAndYear","expensesinMonthAndYear","calculateTotalForAllCategories","eachCategory","Object","keys","map","key","editedCategories","value","filter","el","cat","getCatColor","data","labels","datasets","values","backgroundColor","hoverBackgroundColor","borderWidth","options","legend","display","position","fullWidth","reverse","fontColor","layout","padding","left","right","top","bottom","cutoutPercentage","plugins","render","precision","showZero","fontSize","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","overlap","showActualPercentages","outsidePadding","textMargin","optionsMobile","mobPad15","window","screen","width","headerColor","mode","color","lineArea","background","history","elems","length","clickedLabel","_model","label","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\n\nimport { Route } from \"react-router-dom\";\n\nconst DoughnutChart = props => {\n    const expenses = props.expenses;\n    const currentUser = props.authUser;\n    const selectedMonth = props.month;\n    const selectedYear = props.year;\n    const settings = props.settings;\n\n    let allCategoryTotals = null;\n    let categoryList = null;\n    let categoryColors = null;\n\n    if (!expenses || !currentUser || !selectedMonth || !selectedYear || !settings) {\n        return (\n            <div>\n                <Loader />\n            </div>\n        );\n    }\n\n    if (expenses && currentUser && selectedMonth && selectedYear && settings) {\n        const eachExpense = utils.eachExpense(expenses);\n        const usersExpensesInSelectedMonthAndYear = utils.expensesinMonthAndYear(\n            eachExpense,\n            currentUser,\n            selectedMonth,\n            selectedYear\n        );\n\n        allCategoryTotals = utils.calculateTotalForAllCategories(usersExpensesInSelectedMonthAndYear);\n\n        const eachCategory = allCategoryTotals => {\n            return Object.keys(allCategoryTotals).map(function (key) {\n                return { key: settings.editedCategories[key] ? settings.editedCategories[key] : key, value: allCategoryTotals[key] };\n            });\n        };\n\n        categoryList = eachCategory(allCategoryTotals)\n            .filter(el => {\n                return el.value > 0;\n            })\n            .map(el => el.key);\n\n        categoryColors = categoryList.map((el) => {\n            let cat = Object.keys(settings.editedCategories).filter(function(key) {return settings.editedCategories[key] === el})[0] || el\n            return utils.getCatColor(cat)\n        });\n\n        const data = {\n            labels: categoryList,\n            datasets: [\n                {\n                    data: Object.values(allCategoryTotals).filter(el => el > 0),\n                    backgroundColor: categoryColors,\n                    hoverBackgroundColor: categoryColors,\n                    borderWidth: 0,\n                }\n            ]\n        };\n\n        const options = {\n            legend: { display: true, position: \"left\", fullWidth: true, reverse: false, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n            layout: { padding: { left: 15, right: 85, top: 5, bottom: 5 } },\n            cutoutPercentage: 70,\n            plugins: {\n                labels: {\n                    // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                    render: \"percentage\",\n\n                    // precision for percentage, default is 0\n                    precision: 0,\n\n                    // identifies whether or not labels of value 0 are displayed, default is false\n                    showZero: true,\n\n                    // font size, default is defaultFontSize\n                    fontSize: 12,\n\n                    // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                    fontColor: \"#000\",\n\n                    // font style, default is defaultFontStyle\n                    fontStyle: \"bold\",\n\n                    // font family, default is defaultFontFamily\n                    fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                    // draw text shadows under labels, default is false\n                    textShadow: true,\n\n                    // text shadow intensity, default is 6\n                    shadowBlur: 10,\n\n                    // text shadow X offset, default is 3\n                    shadowOffsetX: -5,\n\n                    // text shadow Y offset, default is 3\n                    shadowOffsetY: 5,\n\n                    // text shadow color, default is 'rgba(0,0,0,0.3)'\n                    shadowColor: \"rgba(255,0,0,0.75)\",\n\n                    // draw label in arc, default is false\n                    // bar chart ignores this\n                    arc: true,\n\n                    // position to draw label, available value is 'default', 'border' and 'outside'\n                    // bar chart ignores this\n                    // default is 'default'\n                    position: \"inside\",\n\n                    // draw label even it's overlap, default is true\n                    // bar chart ignores this\n                    overlap: false,\n\n                    // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                    showActualPercentages: true,\n\n                    // add padding when position is `outside`\n                    // default is 2\n                    outsidePadding: 4,\n\n                    // add margin of text when position is `outside` or `border`\n                    // default is 2\n                    textMargin: 14\n                }\n            }\n        };\n\n        const optionsMobile = {\n            legend: { display: true, position: \"left\", fullWidth: true, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n            layout: { padding: { left: 15, right: 15, top: 15, bottom: 15 } },\n            cutoutPercentage: 0,\n            plugins: {\n                labels: {\n                    // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                    render: \"percentage\",\n\n                    // precision for percentage, default is 0\n                    precision: 0,\n\n                    // identifies whether or not labels of value 0 are displayed, default is false\n                    showZero: true,\n\n                    // font size, default is defaultFontSize\n                    fontSize: 12,\n\n                    // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                    fontColor: \"#000\",\n\n                    // font style, default is defaultFontStyle\n                    fontStyle: \"normal\",\n\n                    // font family, default is defaultFontFamily\n                    fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                    // draw text shadows under labels, default is false\n                    textShadow: true,\n\n                    // text shadow intensity, default is 6\n                    shadowBlur: 10,\n\n                    // text shadow X offset, default is 3\n                    shadowOffsetX: -5,\n\n                    // text shadow Y offset, default is 3\n                    shadowOffsetY: 5,\n\n                    // text shadow color, default is 'rgba(0,0,0,0.3)'\n                    shadowColor: \"rgba(255,0,0,0.75)\",\n\n                    // draw label in arc, default is false\n                    // bar chart ignores this\n                    arc: true,\n\n                    // position to draw label, available value is 'default', 'border' and 'outside'\n                    // bar chart ignores this\n                    // default is 'default'\n                    position: \"inside\",\n\n                    // draw label even it's overlap, default is true\n                    // bar chart ignores this\n                    overlap: false,\n\n                    // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                    showActualPercentages: true,\n\n                    // add padding when position is `outside`\n                    // default is 2\n                    outsidePadding: 4,\n\n                    // add margin of text when position is `outside` or `border`\n                    // default is 2\n                    textMargin: 4\n                }\n            }\n        };\n        const mobPad15 = { padding: window.screen.width > 720 ? \"0\" : \"15px\" };\n        const headerColor = settings.mode === \"night\" ? { color: \"rgb(237, 211, 130)\" } : { color: \"inherit\" }\n        const lineArea = settings.mode === \"night\" ? { background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\" } : { background: \"#dddddd\" };\n\n        return (\n            <div>\n                <hr />\n                <h4 style={{ ...mobPad15, ...headerColor }}>Category Analyser</h4>\n                <Route\n                    render={({ history }) => (\n                        <div style={lineArea}>\n                            <Doughnut\n                                data={data}\n                                options={window.screen.width > 720 ? options : optionsMobile}\n                                height={window.screen.width > 720 ? 80 : 230}\n                                responsive={true}\n                                onElementsClick={elems => {\n                                    if (elems.length) {\n                                        const clickedLabel = elems[0]._model.label;\n                                        history.push(\n                                            `/filter-view?category=${clickedLabel}&selectedMonth=${selectedMonth}&selectedYear=${selectedYear}&from=monthpage`\n                                        );\n                                    }\n                                }}\n                            />\n                        </div>\n                    )}\n                />\n            </div>\n        );\n    }\n};\n\nexport default DoughnutChart;\n"]},"metadata":{},"sourceType":"module"}