{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\expense-manager-react-master\\\\src\\\\components\\\\DailyView\\\\DoughnutChart.js\";\nimport React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\n\nvar DoughnutChart = function DoughnutChart(props) {\n  var expenses = props.expenses;\n  var currentUser = props.authUser;\n  var dateSelected = props.date;\n  var settings = props.settings;\n  var allCategoryTotals = null;\n  var categoryList = null;\n  var categoryColors = null;\n\n  if (!expenses || !currentUser || !dateSelected || !settings) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }));\n  }\n\n  if (expenses && currentUser && dateSelected && settings) {\n    var eachExpense = utils.eachExpense(expenses);\n    var thisUsersExpenses = utils.expensesInDate(eachExpense, currentUser, dateSelected);\n    allCategoryTotals = utils.calculateTotalForAllCategories(thisUsersExpenses, settings.editedCategories);\n    console.log(\"ALl category totals : \", allCategoryTotals, settings.editedCategories);\n\n    var eachCategory = function eachCategory(allCategoryTotals) {\n      return Object.keys(allCategoryTotals).map(function (key) {\n        return {\n          key: settings.editedCategories[key] ? settings.editedCategories[key] : key,\n          value: allCategoryTotals[key]\n        };\n      });\n    };\n\n    categoryList = eachCategory(allCategoryTotals).filter(function (el) {\n      return el.value > 0;\n    }).map(function (el) {\n      return el.key;\n    });\n    categoryColors = categoryList.map(function (el) {\n      var cat = Object.keys(settings.editedCategories).filter(function (key) {\n        return settings.editedCategories[key] === el;\n      })[0] || el;\n      return utils.getCatColor(cat);\n    });\n    var data = {\n      labels: categoryList,\n      datasets: [{\n        data: Object.values(allCategoryTotals).filter(function (el) {\n          return el > 0;\n        }),\n        backgroundColor: categoryColors,\n        hoverBackgroundColor: categoryColors,\n        borderWidth: 0\n      }]\n    };\n    var options = {\n      legend: {\n        display: true,\n        position: \"left\",\n        fullWidth: true,\n        reverse: false,\n        labels: {\n          fontColor: \"rgb(247, 162, 120)\"\n        }\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 85,\n          top: 5,\n          bottom: 5\n        }\n      },\n      cutoutPercentage: 70,\n      plugins: {\n        labels: {\n          // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n          render: \"percentage\",\n          // precision for percentage, default is 0\n          precision: 0,\n          // identifies whether or not labels of value 0 are displayed, default is false\n          showZero: true,\n          // font size, default is defaultFontSize\n          fontSize: 12,\n          // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n          fontColor: \"#000\",\n          // font style, default is defaultFontStyle\n          fontStyle: \"bold\",\n          // font family, default is defaultFontFamily\n          fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n          // draw text shadows under labels, default is false\n          textShadow: true,\n          // text shadow intensity, default is 6\n          shadowBlur: 10,\n          // text shadow X offset, default is 3\n          shadowOffsetX: -5,\n          // text shadow Y offset, default is 3\n          shadowOffsetY: 5,\n          // text shadow color, default is 'rgba(0,0,0,0.3)'\n          shadowColor: \"rgba(255,0,0,0.75)\",\n          // draw label in arc, default is false\n          // bar chart ignores this\n          arc: true,\n          // position to draw label, available value is 'default', 'border' and 'outside'\n          // bar chart ignores this\n          // default is 'default'\n          position: \"inside\",\n          // draw label even it's overlap, default is true\n          // bar chart ignores this\n          overlap: false,\n          // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n          showActualPercentages: true,\n          // add padding when position is `outside`\n          // default is 2\n          outsidePadding: 4,\n          // add margin of text when position is `outside` or `border`\n          // default is 2\n          textMargin: 14\n        }\n      }\n    };\n    var optionsMobile = {\n      legend: {\n        display: true,\n        position: \"left\",\n        fullWidth: true,\n        labels: {\n          fontColor: \"rgb(247, 162, 120)\"\n        }\n      },\n      layout: {\n        padding: {\n          left: 15,\n          right: 15,\n          top: 15,\n          bottom: 15\n        },\n        cutoutPercentage: 0,\n        plugins: {\n          labels: {\n            // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n            render: \"percentage\",\n            // precision for percentage, default is 0\n            precision: 0,\n            // identifies whether or not labels of value 0 are displayed, default is false\n            showZero: true,\n            // font size, default is defaultFontSize\n            fontSize: 12,\n            // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n            fontColor: \"#000\",\n            // font style, default is defaultFontStyle\n            fontStyle: \"bold\",\n            // font family, default is defaultFontFamily\n            fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            // draw text shadows under labels, default is false\n            textShadow: true,\n            // text shadow intensity, default is 6\n            shadowBlur: 10,\n            // text shadow X offset, default is 3\n            shadowOffsetX: -5,\n            // text shadow Y offset, default is 3\n            shadowOffsetY: 5,\n            // text shadow color, default is 'rgba(0,0,0,0.3)'\n            shadowColor: \"rgba(255,0,0,0.75)\",\n            // draw label in arc, default is false\n            // bar chart ignores this\n            arc: true,\n            // position to draw label, available value is 'default', 'border' and 'outside'\n            // bar chart ignores this\n            // default is 'default'\n            position: \"inside\",\n            // draw label even it's overlap, default is true\n            // bar chart ignores this\n            overlap: false,\n            // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n            showActualPercentages: true,\n            // add padding when position is `outside`\n            // default is 2\n            outsidePadding: 4,\n            // add margin of text when position is `outside` or `border`\n            // default is 2\n            textMargin: 14\n          }\n        }\n      }\n    };\n    var headerColor = settings.mode === \"night\" ? {\n      color: \"rgb(237, 211, 130)\"\n    } : {\n      color: \"inherit\"\n    };\n    var lineArea = settings.mode === \"night\" ? {\n      background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\",\n      padding: 0\n    } : {\n      background: \"#dddddd\",\n      padding: 0\n    };\n    var mobPad15 = {\n      padding: window.screen.width > 720 ? \"0\" : \"15px\"\n    };\n    return React.createElement(\"div\", {\n      style: lineArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      style: _objectSpread({}, mobPad15, headerColor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Category Analyser\"), React.createElement(Doughnut, {\n      data: data,\n      options: window.screen.width > 720 ? options : optionsMobile,\n      height: window.screen.width > 720 ? 80 : 230,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default DoughnutChart;","map":{"version":3,"sources":["C:\\Users\\sumit\\OneDrive\\Desktop\\expense-manager-react-master\\src\\components\\DailyView\\DoughnutChart.js"],"names":["React","Doughnut","Loader","utils","DoughnutChart","props","expenses","currentUser","authUser","dateSelected","date","settings","allCategoryTotals","categoryList","categoryColors","eachExpense","thisUsersExpenses","expensesInDate","calculateTotalForAllCategories","editedCategories","console","log","eachCategory","Object","keys","map","key","value","filter","el","cat","getCatColor","data","labels","datasets","values","backgroundColor","hoverBackgroundColor","borderWidth","options","legend","display","position","fullWidth","reverse","fontColor","layout","padding","left","right","top","bottom","cutoutPercentage","plugins","render","precision","showZero","fontSize","fontStyle","fontFamily","textShadow","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","arc","overlap","showActualPercentages","outsidePadding","textMargin","optionsMobile","headerColor","mode","color","lineArea","background","window","screen","width","mobPad15"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Loader from \"../Common/Loader\";\nimport * as utils from \"../Util\";\nimport \"chartjs-plugin-labels\";\n\nconst DoughnutChart = props => {\n    const expenses = props.expenses;\n    const currentUser = props.authUser;\n    const dateSelected = props.date;\n    const settings = props.settings;\n\n    let allCategoryTotals = null;\n    let categoryList = null;\n    let categoryColors = null;\n\n    if (!expenses || !currentUser || !dateSelected || !settings) {\n        return (\n            <div>\n                <Loader />\n            </div>\n        );\n    }\n\n    if (expenses && currentUser && dateSelected && settings) {\n        const eachExpense = utils.eachExpense(expenses);\n        const thisUsersExpenses = utils.expensesInDate(eachExpense, currentUser, dateSelected);\n\n        allCategoryTotals = utils.calculateTotalForAllCategories(thisUsersExpenses, settings.editedCategories);\n        console.log(\"ALl category totals : \", allCategoryTotals, settings.editedCategories)\n        const eachCategory = allCategoryTotals => {\n            return Object.keys(allCategoryTotals).map(function (key) {\n                return { key: settings.editedCategories[key] ? settings.editedCategories[key] : key, value: allCategoryTotals[key] };\n            });\n        };\n\n        categoryList = eachCategory(allCategoryTotals)\n            .filter(el => {\n                return el.value > 0;\n            })\n            .map(el => el.key);\n\n        categoryColors = categoryList.map((el) => {\n            let cat = Object.keys(settings.editedCategories).filter(function(key) {return settings.editedCategories[key] === el})[0] || el\n            return utils.getCatColor(cat)\n        });\n\n        const data = {\n            labels: categoryList,\n            datasets: [\n                {\n                    data: Object.values(allCategoryTotals).filter(el => el > 0),\n                    backgroundColor: categoryColors,\n                    hoverBackgroundColor: categoryColors,\n                    borderWidth: 0,\n                }\n            ]\n        };\n\n        const options = {\n            legend: { display: true, position: \"left\", fullWidth: true, reverse: false, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n            layout: { padding: { left: 15, right: 85, top: 5, bottom: 5 } },\n            cutoutPercentage: 70,\n            plugins: {\n                labels: {\n                    // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                    render: \"percentage\",\n\n                    // precision for percentage, default is 0\n                    precision: 0,\n\n                    // identifies whether or not labels of value 0 are displayed, default is false\n                    showZero: true,\n\n                    // font size, default is defaultFontSize\n                    fontSize: 12,\n\n                    // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                    fontColor: \"#000\",\n\n                    // font style, default is defaultFontStyle\n                    fontStyle: \"bold\",\n\n                    // font family, default is defaultFontFamily\n                    fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                    // draw text shadows under labels, default is false\n                    textShadow: true,\n\n                    // text shadow intensity, default is 6\n                    shadowBlur: 10,\n\n                    // text shadow X offset, default is 3\n                    shadowOffsetX: -5,\n\n                    // text shadow Y offset, default is 3\n                    shadowOffsetY: 5,\n\n                    // text shadow color, default is 'rgba(0,0,0,0.3)'\n                    shadowColor: \"rgba(255,0,0,0.75)\",\n\n                    // draw label in arc, default is false\n                    // bar chart ignores this\n                    arc: true,\n\n                    // position to draw label, available value is 'default', 'border' and 'outside'\n                    // bar chart ignores this\n                    // default is 'default'\n                    position: \"inside\",\n\n                    // draw label even it's overlap, default is true\n                    // bar chart ignores this\n                    overlap: false,\n\n                    // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                    showActualPercentages: true,\n\n                    // add padding when position is `outside`\n                    // default is 2\n                    outsidePadding: 4,\n\n                    // add margin of text when position is `outside` or `border`\n                    // default is 2\n                    textMargin: 14\n                }\n            }\n        };\n\n        const optionsMobile = {\n            legend: { display: true, position: \"left\", fullWidth: true, labels: { fontColor: \"rgb(247, 162, 120)\" } },\n            layout: {\n                padding: { left: 15, right: 15, top: 15, bottom: 15 },\n                cutoutPercentage: 0,\n                plugins: {\n                    labels: {\n                        // render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'\n                        render: \"percentage\",\n\n                        // precision for percentage, default is 0\n                        precision: 0,\n\n                        // identifies whether or not labels of value 0 are displayed, default is false\n                        showZero: true,\n\n                        // font size, default is defaultFontSize\n                        fontSize: 12,\n\n                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor\n                        fontColor: \"#000\",\n\n                        // font style, default is defaultFontStyle\n                        fontStyle: \"bold\",\n\n                        // font family, default is defaultFontFamily\n                        fontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n                        // draw text shadows under labels, default is false\n                        textShadow: true,\n\n                        // text shadow intensity, default is 6\n                        shadowBlur: 10,\n\n                        // text shadow X offset, default is 3\n                        shadowOffsetX: -5,\n\n                        // text shadow Y offset, default is 3\n                        shadowOffsetY: 5,\n\n                        // text shadow color, default is 'rgba(0,0,0,0.3)'\n                        shadowColor: \"rgba(255,0,0,0.75)\",\n\n                        // draw label in arc, default is false\n                        // bar chart ignores this\n                        arc: true,\n\n                        // position to draw label, available value is 'default', 'border' and 'outside'\n                        // bar chart ignores this\n                        // default is 'default'\n                        position: \"inside\",\n\n                        // draw label even it's overlap, default is true\n                        // bar chart ignores this\n                        overlap: false,\n\n                        // show the real calculated percentages from the values and don't apply the additional logic to fit the percentages to 100 in total, default is false\n                        showActualPercentages: true,\n\n                        // add padding when position is `outside`\n                        // default is 2\n                        outsidePadding: 4,\n\n                        // add margin of text when position is `outside` or `border`\n                        // default is 2\n                        textMargin: 14\n                    }\n                }\n            }\n        };\n\n        const headerColor = settings.mode === \"night\" ? { color: \"rgb(237, 211, 130)\" } : { color: \"inherit\" }\n        const lineArea = settings.mode === \"night\" ? { background: window.screen.width > 720 ? \"#2C3034\" : \"#2C3034\", padding: 0 } : { background: \"#dddddd\", padding: 0 };\n\n        const mobPad15 = { padding: window.screen.width > 720 ? \"0\" : \"15px\" };\n\n        return (\n            <div style={lineArea}>\n                <h4 style={{ ...mobPad15, ...headerColor }}>Category Analyser</h4>\n                <Doughnut\n                    data={data}\n                    options={window.screen.width > 720 ? options : optionsMobile}\n                    height={window.screen.width > 720 ? 80 : 230}\n                    responsive={true}\n                />\n            </div>\n        );\n    }\n};\n\nexport default DoughnutChart;\n"]},"metadata":{},"sourceType":"module"}